{-# LANGUAGE OverloadedStrings   #-}
{-# LANGUAGE ScopedTypeVariables #-}

module Api.Methods.Method where

import           Api.Helpers.Checks
import           Network.HTTP.Types         (Status, status200)
import           Api.Helpers.Getters
import qualified Api.Methods.Errors         as Err
import           Api.Types.Response
import           Data.ByteString            (ByteString)
import           Database.PostgreSQL.Simple (Connection)
import           Api.Types.Synonyms

methodName ::
     Connection -> [(ByteString, Maybe Login)] -> IO (Status, Response Token)
methodName conn queryString = do
  (requiredValues, optionalMaybeValues) <- parameters
  let [] = requiredValues
  let [] = optionalMaybeValues
  undefined
  where
    requiredNames = []
    requiredChecks = []
    required = (requiredNames, requiredChecks)
    optionalNames = []
    optionalChecks = []
    optional = (optionalNames, optionalChecks)
    parameters = checkAndGetParameters required optional queryString
